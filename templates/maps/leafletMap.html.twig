{% extends 'base.html.twig' %}
{% block title %}Carte LeafletMap{% endblock %}
{% block body %}

<v-container>

    <v-layout row wrap>

        <v-col cols="12">

            <v-card class=" text-center pa-5">

                <h3 class="font-weight-regular">Emissions de Co2 et données auxiliaires pour 343 villes</h3>

                <a href="https://public.opendatasoft.com/explore/dataset/co2-emissions-cities/map/?sort=study_year_wb">
                    <p>Source des données : https://public.opendatasoft.com</p>
                </a>

                <br />

                <div id="map"></div>

            </v-card>

        </v-col>

    </v-layout>

</v-container>

{% endblock %}

{% block javascripts %}

<script src='//api.tiles.mapbox.com/mapbox.js/plugins/leaflet-omnivore/v0.3.1/leaflet-omnivore.min.js'></script>

<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>

<script>
    var map = L.map('map').setView([38, -102.0], 5);

    // Exemple pour placer 1 marqueur personnalisé à un endroit précis :
    /*var myIcon = L.icon({
        iconUrl: 'FaviconPinpoint.png',
        iconSize: [38, 95],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
        shadowUrl: 'my-icon-shadow.png',
        shadowSize: [68, 95],
        shadowAnchor: [22, 94]
    });
    L.marker([50.505, 30.57], {
        icon: myIcon
    }).addTo(map);*/

    var carto = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
        attribution: 'CARTO',
        maxZoom: 18,
    }).addTo(map);

    // omnivore will AJAX-request this file behind the scenes and parse it:
    // note that there are considerations:
    // - The CSV file must contain latitude and longitude values, in column
    //   named roughly latitude and longitude
    // - The file must either be on the same domain as the page that requests it,
    //   or both the server it is requested from and the user's browser must
    //   support CORS.

    // Version simple de l'appel du CSV : il faut obligatoirement qu'il y ait des colonnes latitude et longitude dans le CSV pour générer tous les marqueurs sur la carte en fonction des coordonnées ->

    //Version d'appel CSV avec POPUP :
    var customLayer = L.geoJson(null, {

        onEachFeature: function(feature, layer) {

            //Pour afficher les données d'une colonne du CSV ://layer.bindPopup(feature.properties.City);

            //Pour afficher les données de deux colonnes du CSV :
            layer.bindPopup('<h3>' + feature.properties.City + '</h3><p>Total emissions (tCO2-eq) : ' + feature.properties.TotalCo2eq + '</p>');

            // Ajouter une info d'une autre colonne, utiliser une concaténation de ce type : "... '</p>' + feature.properties.commentaire);"

            // En indiquant "properties.commentaire" par exemple, les popup's indiquent les infos du CSV correspondantes à la colonne "commentaire"

            // Source des données Co2World sur OpendataSoft : 
            // https://public.opendatasoft.com/explore/dataset/co2-emissions-cities/export/?dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJwaWUiLCJmdW5jIjoiU1VNIiwieUF4aXMiOiJ0b3RhbF9lbWlzc2lvbnNfY2RwX3RjbzJfZXEiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20iLCJwb3NpdGlvbiI6ImNlbnRlciJ9XSwieEF4aXMiOiJyZWdpb24iLCJtYXhwb2ludHMiOjUwLCJzb3J0Ijoic2VyaWUxLTEiLCJzZXJpZXNCcmVha2Rvd24iOiIiLCJzZXJpZXNCcmVha2Rvd25UaW1lc2NhbGUiOiIiLCJjb25maWciOnsiZGF0YXNldCI6ImNvMi1lbWlzc2lvbnMtY2l0aWVzIiwib3B0aW9ucyI6eyJzb3J0Ijoic3R1ZHlfeWVhcl93YiJ9fX1dLCJ0aW1lc2NhbGUiOiIiLCJkaXNwbGF5TGVnZW5kIjp0cnVlLCJhbGlnbk1vbnRoIjp0cnVlfQ%3D%3D

            // Voir la carte sur OpendataSoft :
            // https://public.opendatasoft.com/explore/dataset/co2-emissions-cities/map/?dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJwaWUiLCJmdW5jIjoiU1VNIiwieUF4aXMiOiJ0b3RhbF9lbWlzc2lvbnNfY2RwX3RjbzJfZXEiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20iLCJwb3NpdGlvbiI6ImNlbnRlciJ9XSwieEF4aXMiOiJyZWdpb24iLCJtYXhwb2ludHMiOjUwLCJzb3J0Ijoic2VyaWUxLTEiLCJzZXJpZXNCcmVha2Rvd24iOiIiLCJzZXJpZXNCcmVha2Rvd25UaW1lc2NhbGUiOiIiLCJjb25maWciOnsiZGF0YXNldCI6ImNvMi1lbWlzc2lvbnMtY2l0aWVzIiwib3B0aW9ucyI6eyJzb3J0Ijoic3R1ZHlfeWVhcl93YiJ9fX1dLCJ0aW1lc2NhbGUiOiIiLCJkaXNwbGF5TGVnZW5kIjp0cnVlLCJhbGlnbk1vbnRoIjp0cnVlfQ%3D%3D&location=5,51.59072,-0.65918&basemap=jawg.streets

            // Enquête réalisée par https://doi.pangaea.de/10.1594/PANGAEA.884141 -> PANGAEA.Data Publisher for Earth & Environmental Science

            // Explications sur l'équivalent CO2 : https://www.connaissancedesenergies.org/gaz-effet-de-serre-quest-ce-que-l-equivalent-co2-170807
            // https://fr.wikipedia.org/wiki/%C3%89quivalent_CO2
        }
    });

    // function omnivore : voir autres démos sur https://github.com/mapbox/leaflet-omnivore
    var runLayer = omnivore.csv('/public/csv_files/Co2World.csv', null, customLayer)
        .on('ready', function() {
            // http://leafletjs.com/reference.html#map-fitbounds

            map.fitBounds(runLayer.getBounds());
        })
        .addTo(map);

</script>

{% endblock %}

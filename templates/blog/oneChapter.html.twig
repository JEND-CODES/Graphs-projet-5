{% extends 'base.html.twig' %}
{% block title %}{{ chapter.title }}{% endblock %}
{% block body %}

<v-card flat outlined style="z-index:-1;position:fixed;top:0;left:0;height:100%;width:100%;border:none;">
    <v-img src="/public/backgrounds/background1.jpg" style="height:100%;width:100%;"></v-img>
</v-card>

<v-container mt-3 mb-n2>
      <v-row
        align="center"
        justify="center"
      >
        <v-col class="white--text text-center" cols="12" >  
            <p class="post-title">{{ chapter.title }}</p>
                <br />
                  <v-img
                    :aspect-ratio="16/9"
                    src="{{ chapter.image }}"
                    alt="Illustration"
                    title="Illustration"
                  >
                </v-img>
        </v-col>
      </v-row>
</v-container>
 
<v-container mt-n10>
      <v-layout row wrap>
        <v-col cols="12">
            <v-card flat class="pa-5" color="rgba(255,255,255,1)" style="border-radius:0px;">
                <v-card-text
                class="pt-6"
                style="position: relative;"
                >
                    <p class="post-font-size mb-12" style="color:#444444;">{{ chapter.content | raw }}</p>
                    <p class="font-weight-light grey--text body-2 mb-2">Publié le {{ chapter.createdAt | date('d/m/Y') }} à {{ chapter.createdAt | date ('H:i') }} &bull; {{ chapter.category.title }}</p>
                    <!-- Lien Modifier l'article uniquement visible pour l'adminsitrateur du site -->
                    {% if app.user.id is defined and app.user.id == '1' %}
                        <a href="{{ path('blog_edit', {'id': chapter.id}) }}">
                        <p class="text-right body-2">
                            <i class="fas fa-pen-fancy"></i>&nbsp;&nbsp;Modifier cet article
                        </p>
                        </a>
                    {% endif %}
                </v-card-text>
     
                <!--*** GRAPHIQUES ***-->

                {% if chapter.graphcsvfilename != '' %}
                <div id="container_csv_file" class="responsive-highcharts"></div>
                {% endif %}

                {% if chapter.graphcsvtextdatas != '' %}
                <div id="container_csv_longtext" class="responsive-highcharts"></div>
                <pre id="data_hidden" style="display:none;">
                {{ chapter.graphcsvtextdatas }}
                </pre>
                {% endif %}

                {% if chapter.graphcsvurl != '' %}
                <div id="container_csv_from_url" class="responsive-highcharts"></div>
                {% endif %}

                {% if (chapter.grapharrayjson != '') or (chapter.graphseriesnamejson != '') %}
                <div id="container_json_longtext" class="responsive-highcharts"></div>                           
                {% endif %}

                {% if chapter.graphurljson != '' %}
                <div id="container_json_multiple" class="responsive-highcharts"></div>
                {% endif %}   

                {% if (chapter.graphurlapi != '') or (chapter.graphapifilters != '') %}
                <div id="container_fetch_api_2" class="responsive-highcharts"></div>
                {% endif %}

                {% if (chapter.graphurlapi != '') or (chapter.graphapifilters != '') %}
                <div id="container_fetch_api_3" class="responsive-highcharts"></div>  
                {% endif %}

                {% if (chapter.graphurlapi != '') or (chapter.graphapifilters != '') %}
                <div id="container_fetch_api_4" class="responsive-highcharts"></div>     
                {% endif %}

                {% if (chapter.graphurlapi != '') or (chapter.graphapifilters != '') %}
                <div id="container_fetch_api_5" class="responsive-highcharts"></div>            
                {% endif %}

                {% if (chapter.graphurlapi != '') or (chapter.graphapifilters != '') %}
                <div id="container_fetch_api_6" class="responsive-highcharts"></div>         
                {% endif %}

            </v-card>
        </v-col>
    </v-layout>
</v-container>

{% if app.user %}

<v-container fluid class="mt-n10">
    <v-row>    
        <v-col cols="12">
            <v-card class="pa-5" color="rgba(255,255,255,0)" outlined>
                <v-row>
                    <v-col cols="12" md="4"></v-col>
                    <v-col
                    cols="12"
                    md="4"
                    >
                        <v-card class="pa-5" outlined style="border-color:rgb(255,255,255,0);" color="rgba(255,255,255,0.2)">

                        {{ form_start(formComment) }}

                        {{ form_row(formComment.author, {'label': ' ', 'attr': {'placeholder': 'Pseudo'}}) }}

                        {{ form_row(formComment.content, {'label': ' ', 'attr': {'placeholder': 'Commentaire'}}) }}

                        {{ form_end(formComment) }}  

                        </v-card>
                    </v-col>       
                <v-col cols="12" md="4"></v-col>
                </v-row>   
            </v-card>
        </v-col>
    </v-row>
</v-container>

{% else %}

<v-container>
    <v-layout row wrap>
        <v-col cols="12">
            <v-card color="rgba(255,255,255,0)" outlined> 
                <p class="text-center white--text">Connectez-vous pour commenter cet article</p> 
            </v-card>
        </v-col>  
    </v-layout>
</v-container>

{% endif %}

{% if chapter.comments is empty %}    
{% else %}

<v-card color="rgb(240, 240, 240, 0)" class="pa-5 mt-n12" outlined>    
    {% if chapter.comments | length == '1' %}
         <p class="white--text">&nbsp;&nbsp;&nbsp;&nbsp;{{ chapter.comments | length }} commentaire</p>   
    {% endif %} 
                    
    {% if chapter.comments | length > '1' %}
        <p class="white--text">&nbsp;&nbsp;&nbsp;&nbsp;{{ chapter.comments | length }} commentaires</p>             
{% endif %} 

    <v-container fluid>
        <v-row>
            {% for comment in chapter.comments %}
                <v-col
                class="comments-loop"
                cols="12"
                md="3"
                >
                <v-card class="pa-2">   
                    <v-card-text>
                        <p class="body-1" style="color:dimgrey;">Par {{ comment.author }} le {{ comment.createdAt | date('d/m/Y à H:i') }}</p>
                        <p class="body-1" style="color:dimgrey;">{{ comment.content | striptags | raw }}</p> 
                    </v-card-text>
                </v-card> 
                </v-col>
            {% endfor %}
        </v-row>
    </v-container>
</v-card>

{% endif %}

{% endblock %}

{% block javascripts %}
<!-- *** Constantes de Couleurs, Icons et Fonctions de sélections *** -->
<script src="/public/js/colors.js"></script>

<script>
    // Array avec les nouvelles options de design du graphique
    var design_selector = '{{ chapter.graphtype }}';
    var design = design_selector.split(' ');
    // Highcharts Global configuration
    Highcharts.setOptions({
        // Options globales pour l'ensemble des graphiques
        chart: {
            // design[0] -> correspond à la première valeur entrée dans le champs graph_type de l'éditeur d'article     
            type: design[0],
            // Appel de la fonction du fichier colors.js -> background_graph -> correspond à la troisième valeur entrée dans le champs graph_type de l'éditeur d'article
            plotBackgroundImage: background_selection(),
            // Font-family
            style: {
                fontFamily: 'Quicksand'
            }
        },
        title: {
            text: '{{ chapter.graphtitle }}'
        },
        // Retrait du branding Highcharts
        credits: {
            enabled: false,
        },
        tooltip: {
            valueSuffix: ' {{ chapter.graphvalue }} '
        },
        // Jeux de couleurs sélectionnés en Back Office -> les variables "coloring" sont définies dans Form/ChapterType
        {% if chapter.graphcolorone == 'coloration_1' %}
            colors: coloring_1,
        {% endif %}
        {% if chapter.graphcolorone == 'coloration_2' %}
            colors: coloring_2,
        {% endif %}
        {% if chapter.graphcolorone == 'coloration_3' %}
            colors: coloring_3,
        {% endif %}
                          
        plotOptions: {
            // Indication des valeurs sur chaque point (par défaut visible en "line")   
            line: {
                dataLabels: {
                    enabled: true
                }
            },
            series: {
                // Effet de ligne (options modifiables en back office)
                dashStyle: design[3],
                // Curseur de main
                cursor: 'pointer',
                // Autoriser la sélection de point
                allowPointSelect: true,
                // Marqueur grossissant "popup" apparaît au clic sur un point (par défaut, n'apparaît qu'en type de chart "line")
                marker: {
                    radius: 4,
                    states: {
                        select: {
                            radius: 35,
                            fillColor: 'white',
                        }
                    },
                    // Symbole personnalisé -> icon_graph -> troisième valeur entrée dans le champs graph_type de l'éditeur d'article
                    symbol: icon_selection(),
                }
            },
        }
    });
</script>

<script>
    /*** Graphique Version n°1 -> CSV FROM FILE NAME ***/
    {% if chapter.graphcsvfilename != '' %}
    // *** Au cas où la désactivation des labels sur l'axe X et Y a lieu (choix pour certains graphiques) 
    var must_hide_x = '{{ chapter.graphnamex }}';
    if (must_hide_x === 'false') {
        var hide_result_x = must_hide_x.replace('false', ' ');
    } else {
        var hide_result_x = '{{ chapter.graphnamex }}';
    };

    var must_hide_y = '{{ chapter.graphnamey }}';
    if (must_hide_y === 'false') {
        var hide_result_y = must_hide_y.replace('false', ' ');
    } else {
        var hide_result_y = '{{ chapter.graphnamey }}';
    };
    // *** Récupération des champs édités en Back Office pour les graphiques
    var csv_file_name = '{{ chapter.graphcsvfilename }}';

    Highcharts.chart('container_csv_file', {
        subtitle: {
            text: '{{ chapter.graphsubtitle }}'
        },
        xAxis: {
            title: {
                text: hide_result_x
            }
        },
        yAxis: {
            title: {
                text: hide_result_y
            }
        },
        data: {
            csvURL: 'http://localhost/projet5/public/csv_files/' + csv_file_name + '.csv',
            beforeParse: function (csv) {

                return csv.replace(/\n\n/g, '\n').replace(/'/g, '"');
            }
        },
        series: [{}]
    });
    {% endif %}
</script>

<script>
    /*** Graphique Version n°2 (v2) -> CSV FROM LONG TEXT DATAS ***/
    {% if chapter.graphcsvtextdatas != '' %}
    
    var must_hide_x_v2 = '{{ chapter.graphnamex }}';
    if (must_hide_x_v2 === 'false') {
        var hide_result_x_v2 = must_hide_x_v2.replace('false', ' ');
    } else {
        var hide_result_x_v2 = '{{ chapter.graphnamex }}';
    };
    var must_hide_y_v2 = '{{ chapter.graphnamey }}';
    if (must_hide_y_v2 === 'false') {
        var hide_result_y_v2 = must_hide_y_v2.replace('false', ' ');
    } else {
        var hide_result_y_v2 = '{{ chapter.graphnamey }}';
    };
     
    Highcharts.chart('container_csv_longtext', {
        subtitle: {
            text: '{{ chapter.graphsubtitle }}'
        },
        xAxis: {
            title: {
                text: hide_result_x_v2
            }
        },
        yAxis: {
            title: {
                text: hide_result_y_v2
            }
        },
        data: {
            csv: document.getElementById('data_hidden').innerHTML
        }
    });
    {% endif %}
</script>

<script>
    /*** Graphique Version n°3 (v3) -> CSV FROM URL LINK ***/
    {% if chapter.graphcsvurl != '' %}
    
    var must_hide_x_v3 = '{{ chapter.graphnamex }}';
    if (must_hide_x_v3 === 'false') {
        var hide_result_x_v3 = must_hide_x_v3.replace('false', ' ');
    } else {
        var hide_result_x_v3 = '{{ chapter.graphnamex }}';
    };
    var must_hide_y_v3 = '{{ chapter.graphnamey }}';
    if (must_hide_y_v3 === 'false') {
        var hide_result_y_v3 = must_hide_y_v3.replace('false', ' ');
    } else {
        var hide_result_y_v3 = '{{ chapter.graphnamey }}';
    };
     
    Highcharts.chart('container_csv_from_url', {
        subtitle: {
            text: '{{ chapter.graphsubtitle }}'
        },
        xAxis: {
            title: {
                text: hide_result_x_v3
            }
        },
        yAxis: {
            title: {
                text: hide_result_y_v3
            }
        },
        data: {
            csvURL: '{{ chapter.graphcsvurl }}',
            beforeParse: function (csv) {

                return csv.replace(/\n\n/g, '\n').replace(/'/g, '"');
            }
        },
        series: [{}]
    });
    {% endif %}
</script>

<script>
    /*** Graphique Version n°4 (v4) -> JSON FROM longtext ARRAY ***/
    {% if (chapter.grapharrayjson != '') or(chapter.graphseriesnamejson != '') %}

    // Condition pour retirer les Labels de l'Axe horizontal, ainsi que le mot "false" édité en backOffice -> mot qui commande l'activation de cette condition (Conversion string to boolean)
    if ('{{ chapter.graphnamex }}' === 'false') {
        // On récupère la valeur entrée dans l'éditeur de graphique
        var value_labels = '{{ chapter.graphnamex }}';
        // On parse cette valeur en JSON pour l'injecter dans le code Highcharts
        var value_labels_2 = JSON.parse(value_labels);
        // On retire la mention "false" du titre de l'axe horizontal
        var graph_name_x = ' ';
    } else {
        // Sinon on active les labels par défaut..
        var value_labels_2 = true;
        // Et bien sûr le titre choisi pour l'axe horizontal !
        var graph_name_x = '{{ chapter.graphnamex }}';
    };
    // Idem pour retirer les Labels de l'Axe vertical
    if ('{{ chapter.graphnamey }}' === 'false') {
        var value_vertical = '{{ chapter.graphnamey }}';
        var value_vertical_2 = JSON.parse(value_vertical);
        var value_name_y = ' ';
    } else {
        var value_vertical_2 = true;
        var value_name_y = '{{ chapter.graphnamey }}';
    };

    // *** Récupération des valeurs des séries entrées dans l'éditeur de graphiques 
    var new_data = {{ chapter.grapharrayjson | raw }};
    var new_names = {{ chapter.graphseriesnamejson | raw }};
    // On compte le nombre d'éléments dans l'array
    // console.log(new_names.length);
    // On crée la variable affectée dans la zone "series" du chart
    var series_array = [];
    // On fait des push de '{},' dans l'Array "series_array" en fonction du nombre d'éléments dans l'Array new_names (cela génère autant de lignes qu'il y a d'éléments définis dans new_names) :
    new_names.forEach(function () {
        series_array.push({}, );
    });

    var chart = Highcharts.chart('container_json_longtext', {
        subtitle: {
            text: '{{ chapter.graphsubtitle }}'
        },
        xAxis: {
            title: {
                text: graph_name_x
            },
            labels: {
                enabled: value_labels_2
            }
        },
        yAxis: {
            title: {
                text: value_name_y
            },
            labels: {
                enabled: value_vertical_2
            }
        },
        tooltip: {
            // Retrait du header du tooltip
            headerFormat: null,
        },
        series: series_array
    });
    // Boucle qui actualise les données éditées en Back Office, puis récupérées dans un Array, puis affectés à la zone "series" du Chart:
    chart.series.forEach(series => {
        var datasets = series.index;
        var names = series.index;

        series.update({
            data: new_data[datasets],
            name: new_names[names]
        });
    });
    {% endif %}
</script>

<script>
    /*** Graphique Version n°5 (v5) -> URL JSON ***/
    {% if chapter.graphurljson != '' %}

    var must_hide_x_v5 = '{{ chapter.graphnamex }}';
    if (must_hide_x_v5 === 'false') {
        var hide_result_x_v5 = must_hide_x_v5.replace('false', ' ');
    } else {
        var hide_result_x_v5 = '{{ chapter.graphnamex }}';
    };
    var must_hide_y_v5 = '{{ chapter.graphnamey }}';
    if (must_hide_y_v5 === 'false') {
        var hide_result_y_v5 = must_hide_y_v5.replace('false', ' ');
    } else {
        var hide_result_y_v5 = '{{ chapter.graphnamey }}';
    };

    var url_json = ['{{ chapter.graphurljson }}'];

    $(document).ready(function () {
        options = {
            chart: {
                renderTo: 'container_json_multiple',
            },
            xAxis: {
                title: {
                    text: hide_result_x_v5
                }
            },
            yAxis: {
                title: {
                    text: hide_result_y_v5
                }
            },
            series: [{
                // Attention : dans ce chart, le sous-titre du graphique peut servir pour définir le nom de la série
                name: '{{ chapter.graphsubtitle }}',
                data: []
                }]
        };

        $.getJSON(url_json[0], function (data) {
            options.series[0].data = data;
            chart = new Highcharts.Chart(options);
        });
    });
    {% endif %}
</script>

<script>
    /*** Graphique Version n°11 (v11) -> FETCHING URL JSON OBJECT 2 (avec 3 mots clés) ***/
    $('#container_fetch_api_2').hide();

    {% if (chapter.graphurlapi != '') or(chapter.graphapifilters != '') %} 

    if ('{{ chapter.graphnamex }}' === 'false') {
        var value_labels_v11 = '{{ chapter.graphnamex }}';
        var value_labels_v11_2 = JSON.parse(value_labels_v11);
        var graph_name_x_v11 = ' ';
    } else {
        var value_labels_v11_2 = true;
        var graph_name_x_v11 = '{{ chapter.graphnamex }}';
    };
    if ('{{ chapter.graphnamey }}' === 'false') {
        var value_vertical_v11 = '{{ chapter.graphnamey }}';
        var value_vertical_v11_2 = JSON.parse(value_vertical_v11);
        var value_name_y_v11 = ' ';
    } else {
        var value_vertical_v11_2 = true;
        var value_name_y_v11 = '{{ chapter.graphnamey }}';
    };

    var api_selector_v11 = '{{ chapter.graphapifilters }}';
    var words_v11 = api_selector_v11.split('+++');

    // On régule l'affichage de ce grahique en fonction de la présence de 3 filtres et de l'absence des caractères spéciaux /+/ (censés filtrer pour d'autres graphiques (voir les n°13 et n°14)) :
    if (words_v11.length === 3 && !api_selector_v11.includes('/+/')) {

        $('#container_fetch_api_2').show();

        const url_v11 = "{{ chapter.graphurlapi }}";

        fetch(url_v11)
            .then(res_v11 => {
                return res_v11.json();
            })
            .then(data_v11 => {
                // Boucle de filtrage de l'API (noms + valeurs numériques) recueillis dans un Array
                const filtering_v11 = data_v11[words_v11[0]];

                let gobal_array_v11 = [];

                filtering_v11.forEach(function (items_v11) {
                    gobal_array_v11.push([items_v11[words_v11[1]], parseInt(items_v11[words_v11[2]])]);
                });

                // Boucle de filtrage de noms pour afficher les catégories sur l'AxeX
                const categories_v11 = data_v11[words_v11[0]];

                let category_array_v11 = [];

                categories_v11.forEach(function (items_category_v11) {
                    category_array_v11.push([items_category_v11[words_v11[1]]]);
                });

                Highcharts.chart('container_fetch_api_2', {
                    // Au cas où le champs d'édition du titre de l'axe horizontal contient le mot "false", cela désactive le titre de cet axe ainsi que les Labels :
                    xAxis: {
                        title: {
                            text: graph_name_x_v11
                        },
                        labels: {
                            enabled: value_labels_v11_2
                        },
                        categories: category_array_v11
                    },
                    // Idem pour l'Axe vertical
                    yAxis: {
                        title: {
                            text: value_name_y_v11
                        },
                        labels: {
                            enabled: value_vertical_v11_2
                        }
                    },
                    series: [{
                        data: gobal_array_v11,
                        // Attention : dans ce chart, le sous-titre du graphique définit le nom de la série..!!
                        name: '{{ chapter.graphsubtitle }}',
                        }]
                });
            })
            // Messages d'erreurs -> Cf. https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch
            .catch(err => {
                console.log("Error");
            });
    };
    {% endif %}
</script>

<script>
    /*** Graphique Version n°12 (v12) -> FETCHING URL JSON OBJECT (avec 4 mots clés) ***/
    $('#container_fetch_api_3').hide();

    {% if (chapter.graphurlapi != '') or (chapter.graphapifilters != '') %}

    if ('{{ chapter.graphnamex }}' === 'false') {
        var value_labels_v12 = '{{ chapter.graphnamex }}';
        var value_labels_v12_2 = JSON.parse(value_labels_v12);
        var graph_name_x_v12 = ' ';
    } else {
        var value_labels_v12_2 = true;
        var graph_name_x_v12 = '{{ chapter.graphnamex }}';
    };
    if ('{{ chapter.graphnamey }}' === 'false') {
        var value_vertical_v12 = '{{ chapter.graphnamey }}';
        var value_vertical_v12_2 = JSON.parse(value_vertical_v12);
        var value_name_y_v12 = ' ';
    } else {
        var value_vertical_v12_2 = true;
        var value_name_y_v12 = '{{ chapter.graphnamey }}';
    };

    var api_selector_v12 = '{{ chapter.graphapifilters }}';
    var words_v12 = api_selector_v12.split('+++');

    if (words_v12.length === 4) {

        $('#container_fetch_api_3').show();

        const url_v12 = '{{ chapter.graphurlapi }}';

        fetch(url_v12)
            .then(res_v12 => {
                return res_v12.json();
            })
            .then(data_v12 => {

                const global_filters_v12 = data_v12[words_v12[0]];

                let global_array_v12 = [];

                global_filters_v12.forEach(function (scan_filter_v12) {
                    global_array_v12.push([scan_filter_v12[words_v12[1]][words_v12[2]], parseInt(scan_filter_v12[words_v12[1]][words_v12[3]])]);

                });

                var category_filter_v12 = data_v12[words_v12[0]];

                var category_array_v12 = [];

                category_filter_v12.forEach(function (items_category_v12) {
                    category_array_v12.push([items_category_v12[words_v12[1]][words_v12[2]]]);
                });

                Highcharts.chart('container_fetch_api_3', {
                    xAxis: {
                        title: {
                            text: graph_name_x_v12
                        },
                        labels: {
                            enabled: value_labels_v12_2
                        },
                        categories: category_array_v12
                    },
                    yAxis: {
                        title: {
                            text: value_name_y_v12
                        },
                        labels: {
                            enabled: value_vertical_v12_2
                        }
                    },
                    series: [{
                        data: global_array_v12,
                        name: '{{ chapter.graphsubtitle }}',
                        }]
                });
            })
            // Messages d'erreurs
            .catch(err => {
                console.log("Error");
            });
    };
    {% endif %}
</script>

<script>
    /*** Graphique Version n°13 (v13) -> Filtrage Api avec les filtres de l'AxeX dans un sous-ensemble et le filtre de l'AxeY situé dans l'Array global ***/
    $('#container_fetch_api_4').hide();

    {% if (chapter.graphurlapi != '') or(chapter.graphapifilters != '') %}

    if ('{{ chapter.graphnamex }}' === 'false') {
        var value_labels_v13 = '{{ chapter.graphnamex }}';
        var value_labels_v13_2 = JSON.parse(value_labels_v13);
        var graph_name_x_v13 = ' ';
    } else {
        var value_labels_v13_2 = true;
        var graph_name_x_v13 = '{{ chapter.graphnamex }}';
    };
    if ('{{ chapter.graphnamey }}' === 'false') {
        var value_vertical_v13 = '{{ chapter.graphnamey }}';
        var value_vertical_v13_2 = JSON.parse(value_vertical_v13);
        var value_name_y_v13 = ' ';
    } else {
        var value_vertical_v13_2 = true;
        var value_name_y_v13 = '{{ chapter.graphnamey }}';
    };

    var api_selector_v13 = '{{ chapter.graphapifilters }}';
    var words_v13 = api_selector_v13.split('+++');

    // Exemple de format traité : list+++main/+/temp+++dt
    // Traitement de filtres similaire à cet exemple -> list+++main/+/temp+++dt : on souhaite obtenir dans l'Array de l'API "list", les valeurs "temp" du sous-ensemble "main" affichées sur l'Axe X, et sur l'Axe Y les valeurs numériques "dt" de l'ensemble "list"
    // Traitement du filtrage de l'Api au cas où le deuxième filtre contient les caractères spéciaux /+/ (2 barres liées par un +), ce qui signifie que l'on souhaite obtenir une donnée de l'Api définie dans un sous-ensemble) :
    if (words_v13[1].includes('/+/')) {
        var special_words_v13 = words_v13[1].split('/+/');
        // Il faudra injecter special_words_v13[0] et special_words_v13[1] qui remplacent words_v13[2]
        // alert(special_words_v13.length);
    };
    // Condition d'activation de Fetch et du graphique
    // A condition que seulement le deuxième mot clé filtre contienne les caractères spéciaux /+/
    if (words_v13[1].includes('/+/') && !words_v13[2].includes('/+/')) {

        $('#container_fetch_api_4').show();

        const url_v13 = '{{ chapter.graphurlapi }}';

        fetch(url_v13)
            .then(res_v13 => {
                return res_v13.json();
            })
            .then(data_v13 => {

                const global_filters_v13 = data_v13[words_v13[0]];

                let global_array_v13 = [];

                global_filters_v13.forEach(function (scan_filter_v13) {
                    global_array_v13.push([scan_filter_v13[special_words_v13[0]][special_words_v13[1]], parseInt(scan_filter_v13[words_v13[2]])]);

                });

                const category_filter_v13 = data_v13[words_v13[0]];

                let category_array_v13 = [];

                category_filter_v13.forEach(function (items_category_v13) {
                    category_array_v13.push([items_category_v13[special_words_v13[0]][special_words_v13[1]]]);

                });
            
                Highcharts.chart('container_fetch_api_4', {
                    xAxis: {
                        title: {
                            text: graph_name_x_v13
                        },
                        labels: {
                            enabled: value_labels_v13_2
                        },
                        categories: category_array_v13
                    },
                    yAxis: {
                        title: {
                            text: value_name_y_v13
                        },
                        labels: {
                            enabled: value_vertical_v13_2
                        }
                    },
                    series: [{
                        data: global_array_v13,
                        name: '{{ chapter.graphsubtitle }}',
                        }]
                });
            })
            .catch(err => {
                console.log("Error");
            });
    };
    {% endif %}
</script>

<script>
    /*** Graphique Version n°14 (v14) -> Filtrage Api avec le filtre de l'AxeX dans l'Array général et le filtre de l'AxeY situé dans un sous-ensemble ***/
    $('#container_fetch_api_5').hide();

    {% if (chapter.graphurlapi != '') or(chapter.graphapifilters != '') %} 

    if ('{{ chapter.graphnamex }}' === 'false') {
        var value_labels_v14 = '{{ chapter.graphnamex }}';
        var value_labels_v14_2 = JSON.parse(value_labels_v14);
        var graph_name_x_v14 = ' ';
    } else {
        var value_labels_v14_2 = true;
        var graph_name_x_v14 = '{{ chapter.graphnamex }}';
    };
    if ('{{ chapter.graphnamey }}' === 'false') {
        var value_vertical_v14 = '{{ chapter.graphnamey }}';
        var value_vertical_v14_2 = JSON.parse(value_vertical_v14);
        var value_name_y_v14 = ' ';
    } else {
        var value_vertical_v14_2 = true;
        var value_name_y_v14 = '{{ chapter.graphnamey }}';
    };

    var api_selector_v14 = '{{ chapter.graphapifilters }}';
    var words_v14 = api_selector_v14.split('+++');
    // Exemple de format traité : list+++dt+++main/+/temp
    // Traitement de filtres similaire à cet exemple -> list+++dt+++main/+/temp : on souhaite obtenir dans l'Array de l'API "list", les valeurs "dt" de l'ensemble "list" affichées sur l'Axe X, et sur l'Axe Y les valeurs numériques "temp" du sous-ensemble "main"
    // Traitement du filtrage de l'Api au cas où le troisème filtre contient les caractères spéciaux /+/ :
    if (words_v14[2].includes('/+/')) {
        var special_words_v14 = words_v14[2].split('/+/');
    };
    // A condition que seulement le troisième mot clé filtre contienne les caractères spéciaux /+/
    if (words_v14[2].includes('/+/') && !words_v14[1].includes('/+/')) {

        $('#container_fetch_api_5').show();

        const url_v14 = '{{ chapter.graphurlapi }}';

        fetch(url_v14)
            .then(res_v14 => {
                return res_v14.json();
            })
            .then(data_v14 => {

                const global_filter_v14 = data_v14[words_v14[0]];

                let global_array_v14 = [];

                global_filter_v14.forEach(function (scan_filter_v14) {
                    global_array_v14.push([scan_filter_v14[words_v14[1]], parseInt(scan_filter_v14[special_words_v14[0]][special_words_v14[1]])]);

                });

                const category_filter_v14 = data_v14[words_v14[0]];

                let category_array_v14 = [];

                category_filter_v14.forEach(function (items_category_v14) {
                    category_array_v14.push([items_category_v14[words_v14[1]]]);

                });
            
                Highcharts.chart('container_fetch_api_5', {
                    xAxis: {
                        title: {
                            text: graph_name_x_v14
                        },
                        labels: {
                            enabled: value_labels_v14_2
                        },
                        categories: category_array_v14
                    },
                    yAxis: {
                        title: {
                            text: value_name_y_v14
                        },
                        labels: {
                            enabled: value_vertical_v14_2
                        }
                    },
                    series: [{
                        data: global_array_v14,
                        name: '{{ chapter.graphsubtitle }}',
                        }]
                });
            })
            .catch(err => {
                console.log("Error");
            });
    };
    {% endif %}
</script>

<script>
    /*** Graphique Version n°15 (v15) -> Filtrage Api avec les données pour l'AxeX situées dans un sous-ensemble et les données pour l'AxeY situées dans un sous-ensemble ***/
    $('#container_fetch_api_6').hide();

    {% if (chapter.graphurlapi != '') or (chapter.graphapifilters != '') %}

    if ('{{ chapter.graphnamex }}' === 'false') {
        var value_labels_v15 = '{{ chapter.graphnamex }}';
        var value_labels_v15_2 = JSON.parse(value_labels_v15);
        var graph_name_x_v15 = ' ';
    } else {
        var value_labels_v15_2 = true;
        var graph_name_x_v15 = '{{ chapter.graphnamex }}';
    };
    if ('{{ chapter.graphnamey }}' === 'false') {
        var value_vertical_v15 = '{{ chapter.graphnamey }}';
        var value_vertical_v15_2 = JSON.parse(value_vertical_v15);
        var value_name_y_v15 = ' ';
    } else {
        var value_vertical_v15_2 = true;
        var value_name_y_v15 = '{{ chapter.graphnamey }}';
    };

    var api_selector_v15 = '{{ chapter.graphapifilters }}';
    var words_v15 = api_selector_v15.split('+++');
    // Exemple de format traité : list+++wind/+/speed+++main/+/temp
    // Traitement de filtres similaire à cet exemple -> list+++wind/+/speed+++main/+/temp : on souhaite obtenir dans l'Array de l'API "list", les valeurs "speed" de l'ensemble "wind" affichées sur l'Axe X, et sur l'Axe Y les valeurs numériques "temp" du sous-ensemble "main"
    // Traitement du filtrage de l'Api au cas où le deuxième filtre contient les caractères spéciaux /+/ :
    if (words_v15[1].includes('/+/')) {
        var first_special_words_v15 = words_v15[1].split('/+/');
    };
    // Traitement du filtrage de l'Api au cas où le troisème filtre contient les caractères spéciaux /+/ :
    if (words_v15[2].includes('/+/')) {
        var second_special_words_v15 = words_v15[2].split('/+/');
    };
    // A condition que le deuxième mot clé filtre et le troisième mot clé filtre contiennent les caractères spéciaux /+/
    if (words_v15[1].includes('/+/') && words_v15[2].includes('/+/')) {

        $('#container_fetch_api_6').show();

        const url_v15 = '{{ chapter.graphurlapi }}';

        fetch(url_v15)
            .then(res_v15 => {
                return res_v15.json();
            })
            .then(data_v15 => {

                const global_filters_v15 = data_v15[words_v15[0]];

                let global_array_v15 = [];

                global_filters_v15.forEach(function (scan_filters_v15) {
                    global_array_v15.push([scan_filters_v15[first_special_words_v15[0]][first_special_words_v15[1]], parseInt(scan_filters_v15[second_special_words_v15[0]][second_special_words_v15[1]])]);

                });

                const category_filters_v15 = data_v15[words_v15[0]];

                let category_array_v15 = [];

                category_filters_v15.forEach(function (items_category_v15) {
                    category_array_v15.push([items_category_v15[first_special_words_v15[0]][first_special_words_v15[1]]]);

                });
            
                Highcharts.chart('container_fetch_api_6', {
                    xAxis: {
                        title: {
                            text: graph_name_x_v15
                        },
                        labels: {
                            enabled: value_labels_v15_2
                        },
                        categories: category_array_v15
                    },
                    yAxis: {
                        title: {
                            text: value_name_y_v15
                        },
                        labels: {
                            enabled: value_vertical_v15_2
                        }
                    },
                    series: [{
                        data: global_array_v15,
                        name: '{{ chapter.graphsubtitle }}',
                        }]
                });
            })
            .catch(err => {
                console.log("Error");
            });
    };
    {% endif %}
</script>

<!-- ***** Script de pagination jQuery ***** -->
<script src="/public/js/paginate.js"></script>

{% endblock %}
